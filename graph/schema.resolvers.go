package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"payment-service-iae/graph/model"
	"time"

	"github.com/google/uuid"
	midtrans "github.com/midtrans/midtrans-go"
)

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, amount int32, bookID string, customerID string) (*model.PaymentResponse, error) {
	user := getCurrentUser(ctx) // Implement your auth logic
	if user == nil {
		return nil, fmt.Errorf("unauthorized")
	}

	// Generate unique order ID
	orderID := fmt.Sprintf("BOOK-%s-CUST-%s-%d-%s",
		bookID,
		customerID,
		time.Now().Unix(),
		uuid.New().String()[0:8])

	// Prepare customer data
	customer := &midtrans.CustomerDetails{
		FName: "Test",
		LName: "User",
		Email: "test@example.com",
		Phone: "08123456789",
	}

	resp, _ := r.midtransClient.CreateTransaction(
		orderID,
		int64(amount),
		customer,
	)

	if resp == nil {
		return nil, fmt.Errorf("payment failed: empty response from payment gateway")
	}

	return &model.PaymentResponse{
		OrderID:     orderID,
		BookID:      bookID,
		CustomerID:  customerID,
		Token:       resp.Token,
		RedirectURL: resp.RedirectURL,
	}, nil
}

// HealthCheck is the resolver for the healthCheck field.
func (r *queryResolver) HealthCheck(ctx context.Context) (string, error) {
	return "OK", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.

func getCurrentUser(ctx context.Context) *User {
	// In real implementation, get user from context/JWT
	return &User{
		ID:        "user-123",
		FirstName: "Budi",
		LastName:  "Pratama",
		Email:     "budi.pra@example.com",
		Phone:     "08111222333",
	}
}

type User struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Phone     string
}
