type Query {
    payment(id: ID!): Payment
    payments(
        limit: Int = 20
        offset: Int = 0
        filters: PaymentFilters
    ): PaymentConnection!
    paymentByOrderId(orderId: String!): Payment
    paymentStats: PaymentStats!
}

type Mutation {
    createPayment(input: CreatePaymentInput!): Payment!
    cancelPayment(id: ID!): Payment!
}

type Payment {
    id: ID!
    userId: ID!
    orderId: String!
    amount: Float!
    currency: String!
    status: PaymentStatus!
    paymentMethod: PaymentMethod!
    description: String!
    midtransToken: String
    midtransUrl: String
    transactionId: String
    createdAt: String!
    updatedAt: String!
    expiredAt: String
}

type PaymentConnection {
    edges: [Payment!]!
    totalCount: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type PaymentStats {
    totalPayments: Int!
    totalAmount: Float!
    pendingCount: Int!
    paidCount: Int!
    canceledCount: Int!
    failedCount: Int!
}

input CreatePaymentInput {
    amount: Float!
    currency: String = "IDR"
    paymentMethod: PaymentMethod!
    description: String!
}

input PaymentFilters {
    status: PaymentStatus
    paymentMethod: PaymentMethod
    startDate: String
    endDate: String
    minAmount: Float
    maxAmount: Float
}

enum PaymentStatus {
    PENDING
    PAID
    CANCELED
    EXPIRED
    FAILED
}

enum PaymentMethod {
    CREDIT_CARD
    BANK_TRANSFER
    E_WALLET
    VIRTUAL_ACCOUNT
}